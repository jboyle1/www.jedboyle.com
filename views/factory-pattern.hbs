<main>
    {{#each factoryPattern}}
    <section class="container-fluid">
        <div class="row bg-color-contact">
            <div class="container">
                <div class="hidden-xs col-sm-12 col-md-12">
                    <h3 class="section-heading3 ">
                        <a href="{{this.link}}" target="_blank">{{this.name}}</a>
                    </h3>
                </div>

                
            </div>



            
            <div class="hidden-xs col-sm-12 col-md-12">
                <ls class="section-code-symbols-large">
                    <ul><div class="con-tooltip top"><a href="https://en.wikipedia.org/wiki/XAMPP"><img src="{{this.iconImg1}}"><div class="tooltip"></a><p class="pLeftMargin1">XAMPP</p></div></div></ul>
                    <ul><div class="con-tooltip top"><a href="https://en.wikipedia.org/wiki/HTML5"><img src="{{this.iconImg2}}"><div class="tooltip"></a><p class="pLeftMargin1">HTML5</p></div></div></ul>
                    <ul><div class="con-tooltip top"><a href="https://en.wikipedia.org/wiki/CSS"><img src="{{this.iconImg3}}"><div class="tooltip"></a><p class="pLeftMargin2">CSS3</p></div></div></ul>
                    <ul><div class="con-tooltip top"><a href="https://en.wikipedia.org/wiki/PHP"><img src="{{this.iconImg4}}"><div class="tooltip"></a><p class="pLeftMargin2">PHP</p></div></div></ul>
                    <ul><div class="con-tooltip top"><a href="https://en.wikipedia.org/wiki/Heroku"><img src="{{this.iconImg5}}"><div class="tooltip"></a><p class="pLeftMargin1">Heroku</p></div></div></ul>
                    
                </ls>
            </div>
        </div>
        <div class="row bg-color-contact">
            <div class="container">
                <div class="col-xs-12 hidden-sm hidden-md hidden-lg">
                    <h3 class="section-heading4 ">
                        <a href="{{this.link}}" target="_blank">{{this.name}}</a>

                    </h3>
                </div>
            </div>
        </div>
        <div class="slideshow-container">
            <div class="row">
                <div class="col-md-8">
                    <div class="poj-image">
                        <div id="carousel-example-generic" class="carousel slide" data-ride="carousel">
                            <div class="carousel-inner" role="listbox">
                                <div class="item active">
                                    <a href="{{this.link}}" target="_blank">
                                        <img src="{{this.img1}}" alt="{{this.alt}}">
                                        <div class="carousel-caption"></div>
                                    </a>
                                </div>
                                <div class="item">
                                    <a href="{{this.link}}" target="_blank">
                                        <img src="{{this.img2}}" alt="{{this.alt}}">
                                        <div class="carousel-caption"></div>
                                    </a>
                                </div>
                                <div class="item">
                                    <a href="{{this.link}}" target="_blank">
                                        <img src="{{this.img3}}" alt="{{this.alt}}">
                                        <div class="carousel-caption"></div>
                                    </a>
                                </div>

                                <a class="left carousel-control" href="#carousel-example-generic" role="button"
                                    data-slide="prev">
                                    <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                                    <span class="sr-only">Previous</span>
                                </a>
                                <a class="right carousel-control" href="#carousel-example-generic" role="button"
                                    data-slide="next">
                                    <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </div>
                            <br>
                        </div>
                    </div>
                </div>


                <div class="col-xs-12 hidden-sm hidden-md hidden-lg">
                    <div class="container-fluid">
                        <div class="align-icons">
                            <ls class="section-code-symbols-small-com">
                                <ul><img src="{{this.iconImg1}}"></ul>
                                <ul><img src="{{this.iconImg2}}"></ul>
                                <ul><img src="{{this.iconImg3}}"></ul>
                                <ul><img src="{{this.iconImg4}}"></ul>
                                <ul><img src="{{this.iconImg5}}"></ul>
                            </ls>
                        </div>
                    </div>
                </div>
                

                <div class="hidden-xs col-sm-12 col-md-4 col-lg-3">
                    <h3 class="my-3">Project Description</h3>
                    <br>
                    <p class="poject-description">
                        Here  I have created one of the most popular design patterns called the Factory Pattern.   Design patterns use OOP and make code easier  to maintain and organise. With a factory pattern a class simply creates the object that you want to use. So I have developed two classes; one is the actual object created, and the other is the class that creates the object.

                        <br>
                        <br>
                        The book class has the constructor function that creates the instance of each book. It also holds the method that gets the name and the author. These functions are both public as they need to be accessed by the static book factory class.


                        <br>
                        <br>
                        As the book name and author variables are both private the book factory class must have a public and static function to create and return the name and author of each instantiated book. Each book instance's data is hard coded as this is a simple project on factory patterns for PHP design patterns, it has no need for a database.

                        <br>
                        <br>
                        After pushing each book instance to an array I can then loop through it in the HTML and display each book card with the interpolated data. 


                        <br>
                        <br>
                        <!-- <a href="assets/cv/UX_for-nfc.pdf{{uiDesign}}" target="_blank"> Click here
                                        to read the UX/UI design development for this porject</a> 
                                        <br>
                                        <br>-->
                        <a href="{{this.gitHub}}" target="_blank">Click here for GitHub repository</a>
                    </p>
                    <br>
                </div>
                <br>
                <div class="col-xs-12 hidden-sm hidden-md hidden-lg">
                    <br>
                    <h4 class="my-4 text-center">Project Description</h4>
                    <br>
                    <p class="poject-description-001 text-left">
                        Here  I have created one of the most popular design patterns called the Factory Pattern.   Design patterns use OOP and make code easier  to maintain and organise. With a factory pattern a class simply creates the object that you want to use. So I have developed two classes; one is the actual object created, and the other is the class that creates the object.

                        <br>
                        <br>
                        The book class has the constructor function that creates the instance of each book. It also holds the method that gets the name and the author. These functions are both public as they need to be accessed by the static book factory class.


                        <br>
                        <br>
                        As the book name and author variables are both private the book factory class must have a public and static function to create and return the name and author of each instantiated book. Each book instance's data is hard coded as this is a simple project on factory patterns for PHP design patterns, it has no need for a database.

                        <br>
                        <br>
                        After pushing each book instance to an array I can then loop through it in the HTML and display each book card with the interpolated data. 


                        <br>
                        <br>
                        <!-- <a href="assets/cv/UX_for-nfc.pdf{{uiDesign}}" target="_blank"> Click here
                                        to read the UX/UI design development for this porject</a> 
                                        <br>
                                        <br>-->
                        <a href="{{this.gitHub}}" target="_blank">Click here for GitHub repository</a>
                    </p>
                    <br>
                </div>
            </div>
        </div>
    </section>
    {{/each}}
</main>